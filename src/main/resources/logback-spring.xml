<?xml version="1.0" encoding="UTF-8"?>
<!--
scan:当此属性设置为 true 时，配置文件如果发生改变，将会被重新加载，默认值为 true 。
scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当 scan 为 true 时，
此属性生效。默认的时间间隔为1分钟。
debug:当此属性设置为 true 时，将打印出 logback 内部日志信息，实时查看 logback 运行状态。默认值为 false 。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--
    用来定义变量值的标签， 有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。
    通过定义的值会被插入到logger上下文中。
    定义变量后，可以使“${}”来使用变量。
    -->
    <property name="logback.logdir" value="D:/logs"/>
    <property name="logback.appname" value="stationLog"/>

    <!--
    appender用来格式化日志输出节点，有俩个属性name和class，class用来指定哪种输出策略，
    常用就是控制台输出策略和文件输出策略。
    可以看到 layout 和 encoder ，
    都可以将事件转换为格式化后的日志记录，但是控制台输出使用 layout ，文件输出使用 encoder 。
    -->
    <!--输出到控制台 ConsoleAppender-->
    <appender name="consoleLog" class="ch.qos.logback.core.ConsoleAppender">
        <!--展示格式 layout-->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>
                <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} ----- %msg%n</pattern>
            </pattern>
        </layout>
    </appender>

    <!--输出到日志文件-->
    <appender name="FileAllLog" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
 如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
 的日志改名为今天的日期。即，<File> 的日志都是当天的。
 -->
        <File>${logback.logdir}/all.${logback.appname}.log</File>
        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
            <FileNamePattern>${logback.logdir}/all.${logback.appname}.%d{yyyy-MM-dd}.log</FileNamePattern>
            <!--只保留最近90天的日志-->
            <maxHistory>180</maxHistory>
            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
            <!--<totalSizeCap>1GB</totalSizeCap>-->
        </rollingPolicy>
        <encoder>
            <charset>UTF-8</charset>
            <pattern>
                <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} ----- %msg%n</pattern>
            </pattern>
        </encoder>
    </appender>

    <appender name="FileErrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>Error</level>
        </filter>
        <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
        如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
        的日志改名为今天的日期。即，<File> 的日志都是当天的。
        -->
        <File>${logback.logdir}/error.${logback.appname}.log</File>
        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
            <FileNamePattern>${logback.logdir}/error.${logback.appname}.%d{yyyy-MM-dd}.log</FileNamePattern>
            <!--只保留最近90天的日志-->
            <maxHistory>180</maxHistory>
            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
            <!--<totalSizeCap>1GB</totalSizeCap>-->
        </rollingPolicy>
        <!--日志输出编码格式化-->
        <encoder>
            <charset>UTF-8</charset>
            <pattern>
                <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} ----- %msg%n</pattern>
            </pattern>
        </encoder>
    </appender>

    <!-- 测试环境+开发环境. 多个使用逗号隔开. -->
    <springProfile name="platform">
        <logger name="com.xmmems" level="DEBUG" additivity="false">
            <appender-ref ref="consoleLog"/>
            <appender-ref ref="FileErrorLog"/>
            <appender-ref ref="FileAllLog"/>
        </logger>
    </springProfile>
    <!-- 生产环境. -->
    <springProfile name="prod">
        <logger name="com.xmmems" level="debug" additivity="false">
            <appender-ref ref="consoleLog"/>
            <appender-ref ref="FileAllLog"/>
            <appender-ref ref="FileErrorLog"/>
        </logger>
    </springProfile>

    <!--必选节点  ， 指定最基础的日志输出级别-->
    <root level="INFO">
        <!--appender将会添加到这个loger-->
        <appender-ref ref="consoleLog"/>
        <appender-ref ref="FileAllLog"/>
        <appender-ref ref="FileErrorLog"/>
    </root>
</configuration>